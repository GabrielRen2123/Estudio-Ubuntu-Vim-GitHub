 

 //Esto es un Comentario de una sola linea
    
            /*Esto es un comentario
            de Varias Lineas*/

            /*|||||||IDENTIFICADORES|||||||||
            
                Namespaces : PrimeraAplicacion
                Clases : Program
                Metodos : Main
                Variables : edad
                Constantes : gravedad
            */
            
            /*||||||TIPO DE DATOS|||||||||

                            Entero:                                  Reales:            Booleanos           Texto (utf16)
                    __________|_____________                            |                   |                 |
                    |                       |                           |                   |                 |
                Con Signo               Sin Signo                     float            True or False        string
                (Distingue Negativo  (No distinge negativo            double                                char
                y Positivo)             de Positivo)                  decimal
                
                sbyte                   byte
                short                   ushort
                int                     uint
                long                    ulong
            */
            /*
           VARIABLES NO MODIFICABLES | CONSTANTES
           
           const double PI = 3.14.16; 

POO | CLASES | OBJETOS

       Modificadores de Acceso
       
       Public: Accesible desde cualquier parte
       Private : accesible desde la propia clase
       Protected: Acessible desde clase derivada (hija)
       Internal: accesible desde el mismo ensamblado
       Protected internal: accesible desde el mismo ensamblado o clase derivada de otro emsamblado
       Private protected: Accesible desde la misma clase o clase Derivada del mismo ensamblado
       Por defecto: accesible desde el mismo paquete
       
       Acceder a Metodos o Variables de otra clase:
       Para poder hacer esto, las variables y metodos vienen con una proteccion por Default, pero si se le coloca algunos de los Modificadores como el Public, se podra acceder desde otra instacia
       Ej: 
       
       class <>
       {
       	public int i = 1;
       }
       
       ENCAPSULACION
       
       Privatzar todo excepto lo que sea necesario para que sea Publico.
      Conveciones
      
      las varaibles o metodos que son Publicos, colocarlos con la primera Letra en Mayuscula
      las no publicas con las letras en Minuscula 
      
      CONSTRUCTOR
      
       es como el metodo init de python, tendra el mismo nobmre que la clase de forma public y no retornara ningun valor. Su funcion es hacer una plantilla por Default.
       
       class Coche
       {
       	public Coche()
       	{
       		ruedas = 4;
       		largo = 2300.5;
       		calefaccion = False;
       	}	
       	
       	private int ruedas;
       	private double largo;
       	private boolean calefaccion;
       }
       
       En C# se puede hacer sobrecarga de constructores, se pueden crear mas constructores en una misma clase y con el mismo nombre, solo que los otros podran recibir informacion
       public Coche(<>,<>,<>){}
       
       GETTERS SETTERS
	<private> double set<>()
	{	
		this.<> = <>;
	}       

	<public> double get<>()
	{
	}

	TODO:
	En aplicaciones complejas se pueden crear varas clases y para saber a donde seguir el proyecto despues de un tiempo, se coloca un comentario antes de irse a dodne dejaste el proyecto y colocar //TODO:
	
	Modularisacion
	es la forma de organizar nuestro programa en varias clases principales en diferentes ficheros
	
	METODO STATIC
	 
	Los metodos Staticos o variables estatcias, son cosas que todo los obejtos creados desde una clase comparten (como todo los metodos etc) la difencia es que ellos no pueden modificar los metodos o variables estaticas
	para llamar a estas variables toca, llamar a la clase como tal, si la clase se llama Class entonces se usa Class.<>.	Las Variables constantes se toman como Estaticas sin la necesidad de escribir que son estaticas
	
	CLASES Anonimas
	
	Las clases de Anonimas son clases que no tienen nombre, mienrtas que las clases normales se llaman de alguna forma como class, Clase, PrimerClase etc. Para hacer una clase se escribe
	public Class 
	{
	}
	Para Anonimas es
	
	var <nombre de variable> = new {Donde deberia estar el nombre de la clase, se coloca su contenido}
	var <> = new {Nombre = "String", int = 2, etc}
	
	para acceder a las varaibles de la clase anonima es asi, se llama a la variable que contiene la clase <>.<variable_de_clase> y estas clases no pueden tener metodos
	
	ARRAY 
	Los arrays solo pueden tener datos de un mismo tipo, tambien se pueden hacer array con Obejtos y llamando sus contructores
	Declaracion: <tipo de dato>[] <nombre>;
	Iniciacion: <nombre>= new <tipo de dato>[<numero_para_el_espacio_de_datos>]
	Declara e iniciar <tipo de dato>[] <nombre> = {<...>}	
	
	Class Empleados
	{
		int edad;
		string nombre;
		public Empleados(strin nombre, int edad)
		{
			this.nombre = nombre;
			this.edad = edad;
		}
	}
	
	Empleados[] <nombre del array> = new Empleados[<numero>];
	<nombre del array>[<numero>] = new Empleados(Nombre, edad) //Estp es el constructor del array
	
	Clases anonimas que contienen array :Diccionarios
	
	var <nombre_variable> = new []
	{
		new{Nombre="..", Edad=<numero>},
		new{Nombre="..", Edad=<numero>},
		new{Nombre="..", Edad=<numero>} <===== separados por comas excepto el ultimo 
	}; <======= ; al final
	
	Console.WriteLine(<nombre de la clase anonima>[1]);
	
	ARRAY Bidimensional
	
        int[,] numeros = new int[6,6]; //creacion del array

        int contador = 0; //contador para hacer el if que dibujara el 0

        for (int a = 0; a < 6; a++)

        {

            for(int b = 0; b < 6; b++)

            {

                if (b<=contador) 

                    numeros[a,b] = 0;

                else

                    numeros[a,b]= 1;

                Console.Write(numeros[a,b]); //se dibuja la primera linea

            }

            Console.WriteLine(" "); //un espacio entre las lineas

            contador++; // asi la condicion siempre queda mayo igual

        }
	Herencia

	Para herencia se tiene que tener en cuenta el principio de "es-un", eje, tenemos 3 clases son empleado, director y jefe, para saber el orden, y como se herencian
	nos preguntamos, es un empleado un director?, si no es un director un empleado?, es un jefe un empleado?, como todos son empleados pero con diferentes puestos
	ellos heredaran de la clase empleado.

		EMPLEADO
	___________|____________
	|			|
      JEFE		     DIRECTOR


*/
