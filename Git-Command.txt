git init : para empezar un repositorio

Pasar al stage area (Siempre antes del git commit hacer el git add)
	git add <archivo> : pasar el archivo al stange area para confirmar
	git add . : pasar todos los archivos al stage area
	git commit -m <".. / titulo descriptivo sobre el cambio y el archivo"> 
	git status : para ver el estado actual de los archivos, si estan en proceso de se subidos o no

Versiones 
	{
		las versiones se mueve de arriba hacia abajo, la version de arriba es la mas reciente y la version de mas abajo es la mas 
		vieja
		git log / git log --oneline /  git log -n <numero> : ver los archivos ya confirmados y su identificador de version, con el numero mostrara solo los ultimos 3,4,5 o 1 de los commits
		git checkout < iniciales del identificador del archivo > : ir a una version en especifico
		
	}
Deshacer cambios y recuperar archivos
	{
		git reset <iniciales del identificador> : sirve para desacer un archivo del stage area
		git reset --hard <identificador> : los cambios por encima de esa version se borran
		rm <archivo> : borrar archivo en la carpeta
		git restore <archivo borrado> : recuperar un archivo que se a borrado, pero no --hard / poner el archivo como estaba en su ultimo commit
		cd .git : carpeta donde esta todo lo de git, incluso los arhcivos guardados
	}
subir archivos a mi repositorio en github
	{
		git add remote origin git@github.com:GabrielRen2123/Estudio-Ubuntu-Vim-GitHub.git / enlace del repositorio en git hub
		git remote -v : ver a donde y de donde se descarga codigo
		git push -u origin <nombre de la rama/eje master> : conectarnos con nuestro repositorio en la nube (Pero antes de eso tener una clave publica)
		
		|||| Claves |||||
		
		Ir a ajustes de Git hub clase ssh, nueva, titulo, y la clave
		ssh-keygen -t ed25519 -C "your_email@example.com" : crear clave ssh
		cd .ssh : entrar donde se guarda la contra
		cat <clave en .ssh  que acaba en .pub> : para saber el numero de clave para git hub (cat id_ed25519.pub)
		despues de eso ya se puede subir el codigo
		git push -u origin master : poner las cosas
		git pull : bajar los cambios

		
	}
mesclar ramas/branch
	{
		git branch <nombre>: crear rama
		git branch : ver en que rama estan sin dar argumento
		git checkout <nombre de rama> : ir a esa rama
		git checkout -b <nombre de rama> : crear e ir a la rama
		git merge <nobmre de rama> : para unir la rama al master, pero se tiene que estar en el master o si no funciona
		git branch -d < rama>  : eliminar rama
		git commit --amend -m ".." : cambiar el titulo del commit anterior si se equivocaron en algo
	}
resolucion de conflictos
	{
		En la alerta de visual darle aceptar o denegar los cambios entrantes
		o con el archivo abierto se mostrara las dos versiones y solo se tiene que borrar uno de los dos contenidos
	}
Rebase Interactivo | comandos no frecuentes
	{
		git log --graph : ver de forma grafica las ramas y sus cambios como sus uniones
		git rebase : limpiar el historial de commits
		git reabase -i <rama a donde se mezclara> : con el -i es interactivo podemos cambiar los commits y sus argumentos
		
		para convinar el commit con el commit anterior se escribira en ligar de 'pick' - 'squash' en el commit a remplazar
	}

	git stash : guarda en el buffer los cambios hehcos y deja el archivo como estaba en el ultimo commit, sirve para arreglar algo sin perder los cambios hechos
	git stash --list : muestra lo guardado en el buffer guardados como WIP
	git stash pop : recuperas los cambios del buffer
	
	git tag -a <nombre de la version> -m ".." : crear version 
	git tag : listado de los tags hehcos
	git show <nombre de un commit> : muestra toda su informacion